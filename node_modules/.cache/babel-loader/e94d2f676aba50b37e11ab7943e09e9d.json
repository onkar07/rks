{"ast":null,"code":"var _jsxFileName = \"/Users/onkarsarang/Documents/reactWork/rks/rks/src/components/feeEntry.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport { db } from '../config/firebase'; // import './creditDebit.css'\n\nimport { getDocs, collection, addDoc, updateDoc } from 'firebase/firestore';\nimport { query, orderBy, limit, getDocuments } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FeeEntry() {\n  _s();\n\n  var currentTimeInSeconds = Math.floor(Date.now() / 1000);\n  const [month, setMonth] = useState(\"January\");\n  var monthly_fee = 1100;\n  var monthArray = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  var recArray = [];\n  var dictt = [];\n  var records = {\n    student_id: \"\",\n    fee_amount: 0,\n    fee_month: \"\",\n    fee_date: currentTimeInSeconds\n  };\n  var studentId = useRef();\n  var amount = useRef();\n\n  const handleSubmit = async () => {\n    records.student_id = studentId.current.value;\n    records.fee_amount = amount.current.value;\n    records.fee_month = month;\n    console.log(records);\n\n    try {\n      const snap = await getDocs(collection(db, 'student_fees'));\n      snap.forEach(doc => {\n        var data = (doc.id + doc.id, \" => \", doc.data());\n        console.log(data);\n        recArray.push(doc.id + data);\n      });\n      console.log(recArray);\n      let cn = true;\n\n      for (let i = 0; i < recArray.length; i++) {\n        if (recArray[i].student_Id == records.student_id, recArray[i].fee_month == records.fee_month) {\n          console.log(recArray[i]);\n\n          if (window.confirm(\"ह्या महिन्याची फी आधीच भरली आहे, तरीही भरायची का?\")) {\n            if (records.fee_amount > 1100) {\n              let new_fee_amount = records.fee_amount + recArray[i].fee_amount;\n              let reminder = Number(new_fee_amount) % 1100;\n              let Doloop = Math.floor(Number(new_fee_amount) / 1100);\n              let month_count_u;\n              console.log(Doloop);\n\n              for (let i = 0; i < 12; i++) {\n                if (records.fee_month == monthArray[i]) {\n                  month_count_u = i;\n                }\n              }\n\n              for (let i = 0; i < Doloop; i++) {\n                try {\n                  const docRef = await addDoc(collection(db, 'student_fees'), {\n                    student_Id: records.student_id,\n                    fee_amount: 1100,\n                    fee_month: monthArray[i + 1 + month_count_u],\n                    fee_date: records.fee_date\n                  });\n                  if (docRef) alert(\"Saved\");\n                } catch (err) {\n                  console.log(err);\n                  alert(\"Falied\");\n                }\n              }\n\n              if (reminder > 0) {\n                try {\n                  const docRef = await addDoc(collection(db, 'student_fees'), {\n                    student_Id: records.student_id,\n                    fee_amount: reminder,\n                    fee_month: records.fee_month,\n                    fee_date: records.fee_date\n                  });\n                  if (docRef) alert(\"Saved\");\n                } catch (err) {\n                  console.log(err);\n                  alert(\"Falied\");\n                }\n              }\n            } else {\n              try {\n                // const updateRef = db.collection('student_fees').doc('DC');\n                const updateRef = await updateDoc(collection(db, 'student_fees'), {\n                  student_Id: records.student_id,\n                  fee_amount: 1100,\n                  fee_month: monthArray[i + 1 + month_count],\n                  fee_date: records.fee_date\n                });\n                if (updateRef) alert(\"Updated\");\n              } catch (err) {\n                console.log(err);\n                alert(\"Falied\");\n              }\n            }\n          } else {\n            console.log(\"Declined\");\n          }\n\n          return cn = false;\n        }\n      }\n\n      if (cn == true) {\n        if (records.fee_amount > 1100) {\n          let reminder = Number(records.fee_amount) % 1100;\n          let Doloop = Math.floor(Number(records.fee_amount) / 1100);\n          var month_count = 0;\n          console.log(Doloop);\n\n          for (let i = 0; i < 12; i++) {\n            if (records.fee_month == monthArray[i]) {\n              month_count = i;\n            }\n          }\n\n          for (let i = 0; i < Doloop; i++) {\n            try {\n              const docRef = await addDoc(collection(db, 'student_fees'), {\n                student_Id: records.student_id,\n                fee_amount: 1100,\n                fee_month: monthArray[i + 1 + month_count],\n                fee_date: records.fee_date\n              });\n              if (docRef) alert(\"Saved\");\n            } catch (err) {\n              console.log(err);\n              alert(\"Falied\");\n            }\n          }\n\n          if (reminder > 0) {\n            try {\n              const docRef = await addDoc(collection(db, 'student_fees'), {\n                student_Id: records.student_id,\n                fee_amount: reminder,\n                fee_month: records.fee_month,\n                fee_date: records.fee_date\n              });\n              if (docRef) alert(\"Saved\");\n            } catch (err) {\n              console.log(err);\n              alert(\"Falied\");\n            }\n          }\n        } else {\n          try {\n            const docRef = await addDoc(collection(db, 'student_fees'), {\n              student_Id: records.student_id,\n              fee_amount: Number(records.fee_amount),\n              fee_month: records.fee_month,\n              fee_date: records.fee_date\n            });\n            if (docRef) alert(\"Saved\");\n          } catch (err) {\n            console.log(err);\n            alert(\"Falied\");\n          }\n        }\n\n        console.log(\"saved\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"debitCredit\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"exampleFormControlInput1\",\n          children: \"\\u0935\\u093F\\u0926\\u094D\\u092F\\u093E\\u0930\\u094D\\u0925\\u0940 \\u0928\\u0902\\u092C\\u0930 \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ref: studentId,\n          name: \"subject\",\n          class: \"form-control\",\n          id: \"exampleFormControlInput1\",\n          placeholder: \"\\u0935\\u093F\\u0937\\u092F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"exampleFormControlInput1\",\n          children: \"\\u0930\\u0915\\u094D\\u0915\\u092E \\u20B9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          ref: amount,\n          name: \"amount\",\n          class: \"form-control\",\n          id: \"exampleFormControlInput1\",\n          placeholder: \"\\u0930\\u0915\\u094D\\u0915\\u092E \\u20B9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"exampleFormControlSelect1\",\n          children: \"\\u092B\\u0940 \\u091A\\u093E \\u092E\\u0939\\u093F\\u0928\\u093E \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          class: \"form-control\",\n          value: month,\n          onChange: e => {\n            setMonth(e.target.value);\n          },\n          id: \"exampleFormControlSelect1\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            name: \"month\",\n            value: \"January\",\n            children: \"\\u091C\\u0928\\u0935\\u0930\\u0940 \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            name: \"month\",\n            value: \"February\",\n            children: \"\\u092B\\u0930\\u0935\\u0930\\u0940 \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            name: \"month\",\n            value: \"March\",\n            children: \"\\u092E\\u093E\\u0930\\u094D\\u091A \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            name: \"month\",\n            value: \"April\",\n            children: \"\\u0905\\u092A\\u094D\\u0930\\u0948\\u0932 \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            name: \"month\",\n            value: \"May\",\n            children: \"\\u092E\\u0908 \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            name: \"month\",\n            value: \"June\",\n            children: \"\\u091C\\u0942\\u0928 \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            name: \"month\",\n            value: \"July\",\n            children: \"\\u091C\\u0941\\u0932\\u093E\\u0908 \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            name: \"month\",\n            value: \"August\",\n            children: \"\\u0905\\u0917\\u0938\\u094D\\u0924 \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            name: \"month\",\n            value: \"September\",\n            children: \"\\u0938\\u093F\\u0924\\u0902\\u092C\\u0930 \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            name: \"month\",\n            value: \"October\",\n            children: \"\\u0905\\u0915\\u094D\\u091F\\u0942\\u092C\\u0930 \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            name: \"month\",\n            value: \"November\",\n            children: \"\\u0928\\u0935\\u0902\\u092C\\u0930 \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            name: \"month\",\n            value: \"December\",\n            children: \"\\u0926\\u093F\\u0938\\u0902\\u092C\\u0930 \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        id: \"footer\",\n        class: \"btn btn-primary\",\n        onClick: e => {\n          e.preventDefault();\n          handleSubmit();\n        },\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FeeEntry, \"Sz8GoTP4Bg2ArMjtxdq/dXlVox4=\");\n\n_c = FeeEntry;\nexport default FeeEntry;\n\nvar _c;\n\n$RefreshReg$(_c, \"FeeEntry\");","map":{"version":3,"sources":["/Users/onkarsarang/Documents/reactWork/rks/rks/src/components/feeEntry.js"],"names":["React","useRef","useState","db","getDocs","collection","addDoc","updateDoc","query","orderBy","limit","getDocuments","FeeEntry","currentTimeInSeconds","Math","floor","Date","now","month","setMonth","monthly_fee","monthArray","recArray","dictt","records","student_id","fee_amount","fee_month","fee_date","studentId","amount","handleSubmit","current","value","console","log","snap","forEach","doc","data","id","push","cn","i","length","student_Id","window","confirm","new_fee_amount","reminder","Number","Doloop","month_count_u","docRef","alert","err","updateRef","month_count","e","target","preventDefault"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react'\nimport { db } from '../config/firebase';\n// import './creditDebit.css'\nimport { getDocs, collection, addDoc, updateDoc } from 'firebase/firestore'\nimport { query, orderBy, limit, getDocuments } from \"firebase/firestore\";\nfunction FeeEntry() {\n    var currentTimeInSeconds = Math.floor(Date.now() / 1000);\n    const [month, setMonth] = useState(\"January\")\n    var monthly_fee = 1100;\n    var monthArray = [\"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\"]\n    var recArray = [];\n    var dictt = [];\n    var records = {\n        student_id : \"\",\n        fee_amount : 0,\n        fee_month : \"\",\n        fee_date : currentTimeInSeconds\n    }\n    \n    \n    var studentId = useRef();\n    var amount = useRef();\n\n    const handleSubmit = async () =>{\n        records.student_id = studentId.current.value;\n        records.fee_amount = amount.current.value;\n        records.fee_month = month;\n        console.log(records)\n        try {\n            const snap = await getDocs(collection(db, 'student_fees'));\n            snap.forEach((doc) => {\n              var data = (doc.id + doc.id, \" => \", doc.data())\n              console.log(data)\n              recArray.push(doc.id+data);\n              \n            });\n            console.log(recArray)\n            let cn = true;\n            for(let i=0; i<recArray.length; i++){\n                if(recArray[i].student_Id == records.student_id, recArray[i].fee_month == records.fee_month){\n                    console.log(recArray[i])\n                    if (window.confirm(\"ह्या महिन्याची फी आधीच भरली आहे, तरीही भरायची का?\")) {\n                        \n                        if(records.fee_amount > 1100){\n                            let new_fee_amount = records.fee_amount + recArray[i].fee_amount;\n                            let reminder = Number(new_fee_amount) % 1100;\n                            let Doloop = Math.floor(Number(new_fee_amount) / 1100);\n                            let month_count_u;\n                            console.log(Doloop)\n                            for(let i=0; i<12; i++){\n                                if(records.fee_month == monthArray[i]){\n                                    month_count_u = i;\n                                }\n                            }\n                            for(let i=0; i<Doloop; i++){\n                                try {\n                                    const docRef = await addDoc(collection(db, 'student_fees'), {\n                                        student_Id: records.student_id,\n                                        fee_amount: 1100,\n                                        fee_month: monthArray[i + 1 + month_count_u],\n                                        fee_date: records.fee_date\n                                    })\n                                    if (docRef) alert(\"Saved\")\n                                }\n                                catch (err) {\n                                    console.log(err)\n                                    alert(\"Falied\")\n                                }\n                            }\n                            if(reminder > 0){\n                                try {\n                                    const docRef = await addDoc(collection(db, 'student_fees'), {\n                                        student_Id: records.student_id,\n                                        fee_amount: reminder,\n                                        fee_month: records.fee_month,\n                                        fee_date: records.fee_date\n                                    })\n                                    if (docRef) alert(\"Saved\")\n                                }\n                                catch (err) {\n                                    console.log(err)\n                                    alert(\"Falied\")\n                                }\n                            }\n                        }\n                        else{\n                            try {\n                                // const updateRef = db.collection('student_fees').doc('DC');\n                                const updateRef = await updateDoc(collection(db, 'student_fees'), {\n                                    student_Id: records.student_id,\n                                    fee_amount: 1100,\n                                    fee_month: monthArray[i + 1 + month_count],\n                                    fee_date: records.fee_date\n                                })\n                                if (updateRef) alert(\"Updated\")\n                            }\n                            catch (err) {\n                                console.log(err)\n                                alert(\"Falied\")\n                            }\n                        }\n                      } else {\n                        console.log(\"Declined\")\n                      }\n                    return cn=false;\n                }\n                \n            }\n            if( cn == true){\n                if(records.fee_amount > 1100){\n                    let reminder = Number(records.fee_amount) % 1100;\n                    let Doloop = Math.floor(Number(records.fee_amount) / 1100);\n                    var month_count = 0;\n                    console.log(Doloop)\n                    for(let i=0; i<12; i++){\n                        if(records.fee_month == monthArray[i]){\n                            month_count = i;\n                        }\n                    }\n                    for(let i=0; i<Doloop; i++){\n                        try {\n                            const docRef = await addDoc(collection(db, 'student_fees'), {\n                                student_Id: records.student_id,\n                                fee_amount: 1100,\n                                fee_month: monthArray[i + 1 + month_count],\n                                fee_date: records.fee_date\n                            })\n                            if (docRef) alert(\"Saved\")\n                        }\n                        catch (err) {\n                            console.log(err)\n                            alert(\"Falied\")\n                        }\n                    }\n                    if(reminder > 0){\n                        try {\n                            const docRef = await addDoc(collection(db, 'student_fees'), {\n                                student_Id: records.student_id,\n                                fee_amount: reminder,\n                                fee_month: records.fee_month,\n                                fee_date: records.fee_date\n                            })\n                            if (docRef) alert(\"Saved\")\n                        }\n                        catch (err) {\n                            console.log(err)\n                            alert(\"Falied\")\n                        }\n                    }\n                }\n                else{\n                    try {\n                        const docRef = await addDoc(collection(db, 'student_fees'), {\n                          student_Id: records.student_id,\n                          fee_amount: Number(records.fee_amount),\n                          fee_month: records.fee_month,\n                          fee_date: records.fee_date\n                        })\n                        if(docRef) alert(\"Saved\")\n                      }\n                      catch (err) {\n                        console.log(err)\n                        alert(\"Falied\")\n                      }\n                }\n            console.log(\"saved\")\n            }\n          }\n          catch (err) {\n            console.log(err)\n          }\n    }\n\n    return (\n        <div>\n            <form id=\"debitCredit\">\n                <div class=\"form-group\">\n                    <label for=\"exampleFormControlInput1\">विद्यार्थी नंबर </label>\n                    <input type=\"text\" ref={studentId} name=\"subject\" class=\"form-control\" id=\"exampleFormControlInput1\" placeholder=\"विषय\" />\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"exampleFormControlInput1\">रक्कम ₹</label>\n                    <input type=\"number\" ref={amount} name=\"amount\" class=\"form-control\" id=\"exampleFormControlInput1\" placeholder=\"रक्कम ₹\" />\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"exampleFormControlSelect1\">फी चा महिना </label>\n                    <select class=\"form-control\" value={month} onChange={(e) => { setMonth(e.target.value) }} id=\"exampleFormControlSelect1\">\n                        <option name=\"month\" value=\"January\">जनवरी </option>\n                        <option name=\"month\" value=\"February\">फरवरी </option>\n                        <option name=\"month\" value=\"March\">मार्च </option>\n                        <option name=\"month\" value=\"April\">अप्रैल </option>\n                        <option name=\"month\" value=\"May\">मई </option>\n                        <option name=\"month\" value=\"June\">जून </option>\n                        <option name=\"month\" value=\"July\">जुलाई </option>\n                        <option name=\"month\" value=\"August\">अगस्त </option>\n                        <option name=\"month\" value=\"September\">सितंबर </option>\n                        <option name=\"month\" value=\"October\">अक्टूबर </option>\n                        <option name=\"month\" value=\"November\">नवंबर </option>\n                        <option name=\"month\" value=\"December\">दिसंबर </option>\n\n                    </select>\n                </div>\n                \n                \n                <button type=\"button\" id=\"footer\" class=\"btn btn-primary\" onClick={(e) => {\n                    e.preventDefault();\n                    handleSubmit();\n                }}>Submit</button>\n            </form>\n        </div>\n    )\n}\n\nexport default FeeEntry\n"]},"metadata":{},"sourceType":"module"}